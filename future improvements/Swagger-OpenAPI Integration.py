import requests
import json

class APIDocumentation(BaseModel):
    url: str

    def fetch_openapi_spec(self) -> dict:
        try:
            response = requests.get(self.url)
            response.raise_for_status()
            return response.json()
        except RequestException as e:
            logging.error(f"Error fetching OpenAPI specification: {e}")
            return {}

    def get_endpoints_from_spec(self) -> List[str]:
        spec = self.fetch_openapi_spec()
        endpoints = []
        for path in spec.get('paths', {}):
            for method in spec['paths'][path]:
                endpoints.append(urljoin(self.url, path))
        return endpoints

class CustomAPIScanner:
    # ... [previous code]

    def analyze_documentation(self) -> None:
        logging.info(f"Analyzing OpenAPI documentation at {self.api_doc.url}...")
        endpoints = self.api_doc.get_endpoints_from_spec()
        for endpoint in endpoints:
            logging.info(f"Scanning endpoint: {endpoint}")
            vulnerabilities = self.scan_endpoint(endpoint)
            logging.info(f"Vulnerabilities found: {vulnerabilities}")
