
import re
import time

class CustomAPIScanner:
    # ... [previous code]

    def check_token_leakage(self, endpoint: str) -> bool:
        # Define common token patterns
        token_patterns = [
            r'\b[A-Za-z0-9_\-]{32,}\b',  # Common token length
            r'(?i)token[:\s]*[A-Za-z0-9_\-]{32,}',  # Token in text
        ]
        
        try:
            response = requests.get(endpoint)
            response_text = response.text
            for pattern in token_patterns:
                if re.search(pattern, response_text):
                    logging.info(f"Token leakage detected on {endpoint}")
                    return True
        except RequestException as e:
            logging.error(f"Request error during token leakage test: {e}")
        return False

    def check_rate_limiting(self, endpoint: str) -> bool:
        try:
            headers = {}
            for i in range(10):  # Make 10 requests to test rate limiting
                response = requests.get(endpoint, headers=headers)
                if response.status_code == 429:
                    logging.info(f"Rate limiting detected on {endpoint}")
                    return True
                time.sleep(1)  # Delay to avoid overwhelming the server
        except RequestException as e:
            logging.error(f"Request error during rate limiting test: {e}")
        return False
