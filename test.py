import requests
from bs4 import BeautifulSoup
from typing import List, Dict
from pydantic import BaseModel

# Define a model for API documentation
class APIDocumentation(BaseModel):
    url: str
    endpoints: List[str]

# Define a class for the vulnerability scanner
class CustomAPIScanner:
    def __init__(self, api_doc: APIDocumentation):
        self.api_doc = api_doc

    def scan_endpoint(self, endpoint: str) -> Dict[str, bool]:
        vulnerabilities = {
            'sql_injection': False,
            'xss': False,
            'sensitive_data_exposure': False
        }

        # Check SQL Injection
        sql_injection_payloads = ["' OR '1'='1", "' OR '1'='1' --"]
        for payload in sql_injection_payloads:
            response = requests.get(endpoint, params={'q': payload})
            if "SQL syntax" in response.text:
                vulnerabilities['sql_injection'] = True
                break

        # Check XSS
        xss_payloads = ["<script>alert('XSS')</script>", "'><img src=x onerror=alert(1)>"]
        for payload in xss_payloads:
            response = requests.get(endpoint, params={'q': payload})
            if payload in response.text:
                vulnerabilities['xss'] = True
                break

        # Check Sensitive Data Exposure (this is a simplistic check)
        sensitive_data_indicators = ["password", "secret", "token"]
        for indicator in sensitive_data_indicators:
            if indicator in response.text:
                vulnerabilities['sensitive_data_exposure'] = True
                break

        return vulnerabilities

    def analyze_documentation(self) -> None:
        print(f"Analyzing API documentation at {self.api_doc.url}...")
        # Fetch and parse the API documentation
        try:
            response = requests.get(self.api_doc.url)
            response.raise_for_status()
            data = response.json()
            for path in data.get('paths', {}):
                for method in data[path]:
                    endpoint = f"{self.api_doc.url}{path}"
                    print(f"Scanning endpoint: {endpoint}")
                    vulnerabilities = self.scan_endpoint(endpoint)
                    print(f"Vulnerabilities found: {vulnerabilities}")

        except Exception as e:
            print(f"Error fetching or parsing documentation: {e}")

# Example usage
if __name__ == "__main__":
    # Define API documentation URL and endpoints (example URL)
    api_doc = APIDocumentation(
        url="http://example.com/api-docs",
        endpoints=["/api/v1/resource"]
    )
    scanner = CustomAPIScanner(api_doc)
    scanner.analyze_documentation()
